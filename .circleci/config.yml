version: 2.1
commands:
  deploy:
    description: "Deployment of rules server"
    parameters:
      hostname:
        type: string
        default: "ssh.staging.openchs.org"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run:
          name: Install dependencies and deploy to server
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install make openssl python3-pip
            sudo apt-get install unzip
            sudo pip3 install awscli --upgrade

      - run:
          name: Copy artifacts to server
          command: |
            scp -o StrictHostKeyChecking=no ~/artifacts/rules-server.zip ec2-user@<< parameters.hostname >>:/tmp

      - run:
          name: Deploy server
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@<< parameters.hostname >> \<< EOF
            sudo rm -rf /opt/rules-server
            sudo unzip -qq /tmp/rules-server.zip -d /opt/
            cd /opt/rules-server
            sudo chmod a+x /opt/rules-server/deploy/install.sh
            sudo /opt/rules-server/deploy/install.sh $OPENCHS_UPLOAD_USER_USER_NAME $OPENCHS_UPLOAD_USER_PASSWORD $AVNI_TZ
            EOF

jobs:
  app_test:
    docker:
      - image: cimg/node:10.15.1

    working_directory: ~/rules-server

    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: NPM Install
          no_output_timeout: 30m
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: npm test

  app_build:
    docker:
      - image: cimg/node:10.15.1

    working_directory: ~/rules-server

    steps:
      - checkout

      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}

      - run:
          name: NPM Install
          no_output_timeout: 30m
          command: npm install

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      - run: zip -r ~/rules-server.zip ../rules-server

      - run: tar -czvf ~/rules-server.tgz  -C ../rules-server .

      - run: mkdir -p ~/artifacts

      - run: echo $CIRCLE_BUILD_NUM > ~/artifacts/build_version

      - run: cp ~/rules-server.zip ~/artifacts/

      - run: cp ~/rules-server.tgz ~/artifacts/

      - persist_to_workspace:
          root: ~/artifacts
          paths:
            - build_version
            - rules-server.zip
            - rules-server.tgz

      - store_artifacts:
          path: ~/artifacts
 
  build_docker_image:
    docker:
      - image: docker:git
    resource_class: medium
    working_directory: ~/rules-server
    steps:
      - attach_workspace:
          at: ~/artifacts

      - setup_remote_docker

      - run: unzip ~/artifacts/rules-server.zip -d .

      # - run:
      #     name: Determine Docker Tags
      #     command: |
      #       if [ "$CIRCLE_BRANCH" == "master" ]; then
      #         DOCKER_TAG="latest"
      #       elif [ -n "$CIRCLE_TAG" ]; then
      #         DOCKER_TAG="$CIRCLE_TAG"
      #       else
      #         echo "No valid tag found. Exiting."
      #         exit 1
      #       fi
      #       echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
      #     shell: /bin/sh

      - run:
          name: Authenticate with Docker Hub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - run:
          name: Build Multi-Platform Docker Image
          command: |
            echo "ls -al"
            ls -al
            echo "PWD-1"
            pwd
            echo "ls -al"
            ls -al
            # source $BASH_ENV
            docker buildx create --use
            docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/rules-server:branch" --push -f Dockerfile .
            # if [ "$CIRCLE_BRANCH" == "master" ]; then
            #   SHORT_CIRCLE_SHA=$(echo "$CIRCLE_SHA1" | cut -c1-6)
            #   docker buildx build --platform linux/amd64,linux/arm64 --tag "$DOCKER_USERNAME/rules-server:${SHORT_CIRCLE_SHA}" --push -f Dockerfile .
            # fi

  STAGING_deploy:
    docker:
      - image: cimg/node:10.24.1
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.staging.openchs.org"
  PRERELEASE_deploy:
    docker:
      - image: cimg/node:10.24.1
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.prerelease.openchs.org"
  PERF_deploy:
    docker:
      - image: cimg/node:10.24.1
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.perf.openchs.org"
  PRODUCTION_deploy:
    docker:
      - image: cimg/node:10.24.1
    working_directory: ~/
    steps:
      - deploy:
          hostname: "ssh.server.openchs.org"
          
tags_filter: &tags_filter
  filters:
    tags:
      only: /.*/

workflows:
  version: 2
  test_and_build:
    jobs:
      # - app_test:
      #     <<: *tags_filter
      - app_build
          # <<: *tags_filter
          # requires:
          #   - app_test
      - build_docker_image:
          context: dockerhub
          requires:
            - app_build
          filters:
            tags:
              only: /.*/
      - STAGING_deploy:
          context: non-prod-deploy
          filters:
            branches:
              only:
                - master
                - /^3\..*/
          requires:
            - app_build
      - PRODUCTION_approve:
          type: approval
          requires:
            - app_build
      - PRODUCTION_deploy:
          context: prod-deploy
          requires:
            - PRODUCTION_approve
      - PRERELEASE_approve:
          type: approval
          requires:
            - app_build
      - PRERELEASE_deploy:
          context: non-prod-deploy
          requires:
            - PRERELEASE_approve
      - PERF_approve:
          type: approval
          requires:
            - app_build
      - PERF_deploy:
          context: non-prod-deploy
          requires:
            - PERF_approve
notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/0fdffde721194986f2a0
